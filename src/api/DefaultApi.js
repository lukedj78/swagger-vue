/**
 * Cancellation policies acceptance
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AcceptBodyRequest', 'model/AcceptBodyResponse', 'model/PolicyInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AcceptBodyRequest'), require('../model/AcceptBodyResponse'), require('../model/PolicyInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.CancellationPoliciesAcceptance) {
      root.CancellationPoliciesAcceptance = {};
    }
    root.CancellationPoliciesAcceptance.DefaultApi = factory(root.CancellationPoliciesAcceptance.ApiClient, root.CancellationPoliciesAcceptance.AcceptBodyRequest, root.CancellationPoliciesAcceptance.AcceptBodyResponse, root.CancellationPoliciesAcceptance.PolicyInfo);
  }
}(this, function(ApiClient, AcceptBodyRequest, AcceptBodyResponse, PolicyInfo) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the acceptedAllCancellationPolicies operation.
     * @callback module:api/DefaultApi~acceptedAllCancellationPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AcceptBodyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept cancellation policy
     * Flag all cancellation policies (eventually only one) as accepted
     * @param {String} quotationId quotation Id
     * @param {module:model/AcceptBodyRequest} body quotation Id
     * @param {module:api/DefaultApi~acceptedAllCancellationPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AcceptBodyResponse}
     */
    this.acceptedAllCancellationPolicies = function(quotationId, body, callback) {
      var postBody = body;

      // verify the required parameter 'quotationId' is set
      if (quotationId === undefined || quotationId === null) {
        throw new Error("Missing the required parameter 'quotationId' when calling acceptedAllCancellationPolicies");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling acceptedAllCancellationPolicies");
      }


      var pathParams = {
        'quotationId': quotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AcceptBodyResponse;

      return this.apiClient.callApi(
        '/{quotationId}/accepted', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCancellationPolicyEntries operation.
     * @callback module:api/DefaultApi~createCancellationPolicyEntriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save cancellation policies
     * Save or update cancellation policies of all products (eventually only one) of specified quotation
     * @param {String} quotationId quotation Id
     * @param {Array.<module:model/PolicyInfo>} policyInfos cancellation policy infos
     * @param {module:api/DefaultApi~createCancellationPolicyEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createCancellationPolicyEntries = function(quotationId, policyInfos, callback) {
      var postBody = policyInfos;

      // verify the required parameter 'quotationId' is set
      if (quotationId === undefined || quotationId === null) {
        throw new Error("Missing the required parameter 'quotationId' when calling createCancellationPolicyEntries");
      }

      // verify the required parameter 'policyInfos' is set
      if (policyInfos === undefined || policyInfos === null) {
        throw new Error("Missing the required parameter 'policyInfos' when calling createCancellationPolicyEntries");
      }


      var pathParams = {
        'quotationId': quotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{quotationId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllCancellationPolicyEntry operation.
     * @callback module:api/DefaultApi~deleteAllCancellationPolicyEntryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all cancellation policies
     * Delete cancellation policy for all products of a quotation
     * @param {String} quotationId quotation Id
     * @param {module:api/DefaultApi~deleteAllCancellationPolicyEntryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAllCancellationPolicyEntry = function(quotationId, callback) {
      var postBody = null;

      // verify the required parameter 'quotationId' is set
      if (quotationId === undefined || quotationId === null) {
        throw new Error("Missing the required parameter 'quotationId' when calling deleteAllCancellationPolicyEntry");
      }


      var pathParams = {
        'quotationId': quotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{quotationId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCancellationPolicyByQuotationIdAndItemId operation.
     * @callback module:api/DefaultApi~deleteCancellationPolicyByQuotationIdAndItemIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete cancellation policy for a single product
     * Delete cancellation policy for a single product
     * @param {String} quotationId quotation Id
     * @param {String} basketItemId basket product Id
     * @param {module:api/DefaultApi~deleteCancellationPolicyByQuotationIdAndItemIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCancellationPolicyByQuotationIdAndItemId = function(quotationId, basketItemId, callback) {
      var postBody = null;

      // verify the required parameter 'quotationId' is set
      if (quotationId === undefined || quotationId === null) {
        throw new Error("Missing the required parameter 'quotationId' when calling deleteCancellationPolicyByQuotationIdAndItemId");
      }

      // verify the required parameter 'basketItemId' is set
      if (basketItemId === undefined || basketItemId === null) {
        throw new Error("Missing the required parameter 'basketItemId' when calling deleteCancellationPolicyByQuotationIdAndItemId");
      }


      var pathParams = {
        'quotationId': quotationId,
        'basketItemId': basketItemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/{quotationId}/items/{basketItemId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCancellationPolicyByQuotationIdAndItemIdAndRph operation.
     * @callback module:api/DefaultApi~deleteCancellationPolicyByQuotationIdAndItemIdAndRphCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete single room
     * Delete cancellation policy for a single room
     * @param {String} quotationId quotation Id
     * @param {String} basketItemId basket product Id
     * @param {String} rph basket product Id
     * @param {module:api/DefaultApi~deleteCancellationPolicyByQuotationIdAndItemIdAndRphCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCancellationPolicyByQuotationIdAndItemIdAndRph = function(quotationId, basketItemId, rph, callback) {
      var postBody = null;

      // verify the required parameter 'quotationId' is set
      if (quotationId === undefined || quotationId === null) {
        throw new Error("Missing the required parameter 'quotationId' when calling deleteCancellationPolicyByQuotationIdAndItemIdAndRph");
      }

      // verify the required parameter 'basketItemId' is set
      if (basketItemId === undefined || basketItemId === null) {
        throw new Error("Missing the required parameter 'basketItemId' when calling deleteCancellationPolicyByQuotationIdAndItemIdAndRph");
      }

      // verify the required parameter 'rph' is set
      if (rph === undefined || rph === null) {
        throw new Error("Missing the required parameter 'rph' when calling deleteCancellationPolicyByQuotationIdAndItemIdAndRph");
      }


      var pathParams = {
        'quotationId': quotationId,
        'basketItemId': basketItemId,
        'rph': rph
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/{quotationId}/items/{basketItemId}/rooms/{rph}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCancellationPolicyEntryByQuotationId operation.
     * @callback module:api/DefaultApi~getAllCancellationPolicyEntryByQuotationIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all cancellation policies
     * Get all cancellation policies of a specified quotation
     * @param {String} quotationId quotation Id
     * @param {module:api/DefaultApi~getAllCancellationPolicyEntryByQuotationIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getAllCancellationPolicyEntryByQuotationId = function(quotationId, callback) {
      var postBody = null;

      // verify the required parameter 'quotationId' is set
      if (quotationId === undefined || quotationId === null) {
        throw new Error("Missing the required parameter 'quotationId' when calling getAllCancellationPolicyEntryByQuotationId");
      }


      var pathParams = {
        'quotationId': quotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{quotationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCancellationPolicyEntryByQuotationIdAndItemId operation.
     * @callback module:api/DefaultApi~getCancellationPolicyEntryByQuotationIdAndItemIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get single cancellation policy
     * Get cancellation policy of a single product
     * @param {String} quotationId quotation Id
     * @param {String} basketItemId basket product Id
     * @param {module:api/DefaultApi~getCancellationPolicyEntryByQuotationIdAndItemIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getCancellationPolicyEntryByQuotationIdAndItemId = function(quotationId, basketItemId, callback) {
      var postBody = null;

      // verify the required parameter 'quotationId' is set
      if (quotationId === undefined || quotationId === null) {
        throw new Error("Missing the required parameter 'quotationId' when calling getCancellationPolicyEntryByQuotationIdAndItemId");
      }

      // verify the required parameter 'basketItemId' is set
      if (basketItemId === undefined || basketItemId === null) {
        throw new Error("Missing the required parameter 'basketItemId' when calling getCancellationPolicyEntryByQuotationIdAndItemId");
      }


      var pathParams = {
        'quotationId': quotationId,
        'basketItemId': basketItemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{quotationId}/items/{basketItemId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
