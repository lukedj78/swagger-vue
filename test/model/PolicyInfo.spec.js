/**
 * Cancellation policies acceptance
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CancellationPoliciesAcceptance);
  }
}(this, function(expect, CancellationPoliciesAcceptance) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CancellationPoliciesAcceptance.PolicyInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PolicyInfo', function() {
    it('should create an instance of PolicyInfo', function() {
      // uncomment below and update the code to test PolicyInfo
      //var instane = new CancellationPoliciesAcceptance.PolicyInfo();
      //expect(instance).to.be.a(CancellationPoliciesAcceptance.PolicyInfo);
    });

    it('should have the property id (base name: "_id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new CancellationPoliciesAcceptance.PolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property quotationId (base name: "quotationId")', function() {
      // uncomment below and update the code to test the property quotationId
      //var instane = new CancellationPoliciesAcceptance.PolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property _date (base name: "date")', function() {
      // uncomment below and update the code to test the property _date
      //var instane = new CancellationPoliciesAcceptance.PolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property basketItemId (base name: "basketItemId")', function() {
      // uncomment below and update the code to test the property basketItemId
      //var instane = new CancellationPoliciesAcceptance.PolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property rph (base name: "rph")', function() {
      // uncomment below and update the code to test the property rph
      //var instane = new CancellationPoliciesAcceptance.PolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property hasErrors (base name: "hasErrors")', function() {
      // uncomment below and update the code to test the property hasErrors
      //var instane = new CancellationPoliciesAcceptance.PolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property isAccepted (base name: "isAccepted")', function() {
      // uncomment below and update the code to test the property isAccepted
      //var instane = new CancellationPoliciesAcceptance.PolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property isRefundable (base name: "isRefundable")', function() {
      // uncomment below and update the code to test the property isRefundable
      //var instane = new CancellationPoliciesAcceptance.PolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instane = new CancellationPoliciesAcceptance.PolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property originalMessage (base name: "originalMessage")', function() {
      // uncomment below and update the code to test the property originalMessage
      //var instane = new CancellationPoliciesAcceptance.PolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property errorMessage (base name: "errorMessage")', function() {
      // uncomment below and update the code to test the property errorMessage
      //var instane = new CancellationPoliciesAcceptance.PolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property upsertError (base name: "upsertError")', function() {
      // uncomment below and update the code to test the property upsertError
      //var instane = new CancellationPoliciesAcceptance.PolicyInfo();
      //expect(instance).to.be();
    });

  });

}));
